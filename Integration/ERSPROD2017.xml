<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="IRIS for Windows (x86-64) 2023.2 (Build 227U)" ts="2023-09-29 11:34:06">
<Class name="RFT.ERS.Classes.Attachment">
<Super>Ens.Response</Super>
<TimeChanged>66746,37302.6023422</TimeChanged>
<TimeCreated>66746,37302.6023422</TimeCreated>

<Property name="attachmentID">
<Type>%Integer</Type>
</Property>

<Property name="insertedBy">
<Type>%String</Type>
</Property>

<Property name="contentType">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="url">
<Type>%String</Type>
</Property>

<Property name="size">
<Type>%String</Type>
</Property>

<Property name="title">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="docStatus">
<Type>%String</Type>
</Property>

<Property name="createdDateTime">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>AttachmentDefaultData</DefaultData>
<Data name="AttachmentDefaultData">
<Subscript>"Attachment"</Subscript>
<Value name="1">
<Value>attachmentID</Value>
</Value>
<Value name="2">
<Value>insertedBy</Value>
</Value>
<Value name="3">
<Value>contentType</Value>
</Value>
<Value name="4">
<Value>url</Value>
</Value>
<Value name="5">
<Value>size</Value>
</Value>
<Value name="6">
<Value>title</Value>
</Value>
<Value name="7">
<Value>docStatus</Value>
</Value>
<Value name="8">
<Value>createdDateTime</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="RFT.ERS.Classes.AttachmentResponse">
<Super>Ens.Response</Super>
<TimeChanged>66746,37302.6369144</TimeChanged>
<TimeCreated>66746,37302.6369144</TimeCreated>

<Property name="StatusCode">
<Type>%Integer</Type>
</Property>

<Property name="FilePath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="FileType">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>AttachmentResponseDefaultData</DefaultData>
<Data name="AttachmentResponseDefaultData">
<Subscript>"AttachmentResponse"</Subscript>
<Value name="1">
<Value>StatusCode</Value>
</Value>
<Value name="2">
<Value>FilePath</Value>
</Value>
<Value name="3">
<Value>FileType</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="RFT.ERS.Classes.AuditClass">
<Super>%Persistent</Super>
<TimeChanged>66746,37302.559841</TimeChanged>
<TimeCreated>66746,37302.559841</TimeCreated>

<Method name="PerformAction">
<ClassMethod>1</ClassMethod>
<FormalSpec>userID:%String,action:%String,details:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
        // Construct the audit event data
        Set eventSource = "NHS ERS API"
        Set eventType = "WorkList Retrieval"
        Set event = action
        Set DateTime = $zts
        Set HumanDateTime = $zdatetime(DateTime, 5)
        Set eventData = details_". User: "_userID_"."_" Performed Action: "_action_". DateTime: "_HumanDateTime_"."
        Set description = "User '" _ userID _ "' Performed action: " _ action _"DateTime: " _HumanDateTime

        // Call the $SYSTEM.Security.Audit() command
        Do $SYSTEM.Security.Audit(userID, eventType, action, eventData, description)

        Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^RFT.ERS.Classes.AuditClassD</DataLocation>
<DefaultData>AuditClassDefaultData</DefaultData>
<IdLocation>^RFT.ERS.Classes.AuditClassD</IdLocation>
<IndexLocation>^RFT.ERS.Classes.AuditClassI</IndexLocation>
<StreamLocation>^RFT.ERS.Classes.AuditClassS</StreamLocation>
<Data name="AuditClassDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="RFT.ERS.Classes.HttpResponse">
<Super>Ens.Response</Super>
<TimeChanged>66746,37302.6466368</TimeChanged>
<TimeCreated>66746,37302.6466368</TimeCreated>

<Property name="StatusCode">
<Type>%Integer</Type>
</Property>

<Property name="ResponseBody">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100000"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>HttpResponseDefaultData</DefaultData>
<Data name="HttpResponseDefaultData">
<Subscript>"HttpResponse"</Subscript>
<Value name="1">
<Value>StatusCode</Value>
</Value>
<Value name="2">
<Value>ResponseBody</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="RFT.ERS.Classes.RefToDB">
<Super>Ens.Request</Super>
<TimeChanged>66746,37302.7150215</TimeChanged>
<TimeCreated>66746,37302.7150215</TimeCreated>

<Property name="ubrn">
<Type>%String</Type>
</Property>

<Property name="attachmentCount">
<Type>%Integer</Type>
</Property>

<Property name="downloadCount">
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>RefToDBDefaultData</DefaultData>
<Data name="RefToDBDefaultData">
<Subscript>"RefToDB"</Subscript>
<Value name="1">
<Value>ubrn</Value>
</Value>
<Value name="2">
<Value>attachmentCount</Value>
</Value>
<Value name="3">
<Value>downloadCount</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="RFT.ERS.Classes.ReferralDetails">
<Super>Ens.Response</Super>
<TimeChanged>66746,37302.6675987</TimeChanged>
<TimeCreated>66746,37302.6675987</TimeCreated>

<Property name="ubrn">
<Type>%Integer</Type>
</Property>

<Property name="patientID">
<Type>%String</Type>
</Property>

<Property name="apptStart">
<Type>%String</Type>
</Property>

<Property name="apptEnd">
<Type>%String</Type>
</Property>

<Property name="specialty">
<Type>%String</Type>
</Property>

<Property name="status">
<Type>%String</Type>
</Property>

<Property name="intent">
<Type>%String</Type>
</Property>

<Property name="priority">
<Type>%String</Type>
</Property>

<Property name="docStatus">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ReferralDetailsDefaultData</DefaultData>
<Data name="ReferralDetailsDefaultData">
<Subscript>"ReferralDetails"</Subscript>
<Value name="1">
<Value>ubrn</Value>
</Value>
<Value name="2">
<Value>patientID</Value>
</Value>
<Value name="3">
<Value>apptStart</Value>
</Value>
<Value name="4">
<Value>apptEnd</Value>
</Value>
<Value name="5">
<Value>specialty</Value>
</Value>
<Value name="6">
<Value>status</Value>
</Value>
<Value name="7">
<Value>intent</Value>
</Value>
<Value name="8">
<Value>priority</Value>
</Value>
<Value name="9">
<Value>docStatus</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="RFT.ERS.Classes.ReferralDetailsResponse">
<Super>Ens.Response</Super>
<TimeChanged>66746,37302.6880051</TimeChanged>
<TimeCreated>66746,37302.6880051</TimeCreated>

<Property name="Referral">
<Type>RFT.ERS.Classes.ReferralDetails</Type>
</Property>

<Property name="Attachment">
<Type>RFT.ERS.Classes.Attachment</Type>
<Collection>list</Collection>
</Property>

<Property name="StatusCode">
<Type>%Integer</Type>
</Property>

<Property name="ErrorText">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ReferralDetailsResponseDefaultData</DefaultData>
<Data name="ReferralDetailsResponseDefaultData">
<Subscript>"ReferralDetailsResponse"</Subscript>
<Value name="1">
<Value>Referral</Value>
</Value>
<Value name="2">
<Value>Attachment</Value>
</Value>
<Value name="3">
<Value>StatusCode</Value>
</Value>
<Value name="4">
<Value>ErrorText</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="RFT.ERS.Classes.RequestAttachment">
<Super>Ens.Request</Super>
<TimeChanged>66746,37302.7323202</TimeChanged>
<TimeCreated>66746,37302.7323202</TimeCreated>

<Property name="attachmentID">
<Type>%Integer</Type>
</Property>

<Property name="url">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>RequestAttachmentDefaultData</DefaultData>
<Data name="RequestAttachmentDefaultData">
<Subscript>"RequestAttachment"</Subscript>
<Value name="1">
<Value>attachmentID</Value>
</Value>
<Value name="2">
<Value>url</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="RFT.ERS.Classes.RequestClinicalInformation">
<Super>Ens.Request</Super>
<TimeChanged>66746,37302.7506526</TimeChanged>
<TimeCreated>66746,37302.7506526</TimeCreated>

<Property name="ubrn">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ClinicalInformationDefaultData</DefaultData>
<Data name="ClinicalInformationDefaultData">
<Subscript>"ClinicalInformation"</Subscript>
<Value name="1">
<Value>ubrn</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="RFT.ERS.Classes.RequestReferralDetails">
<Super>Ens.Request</Super>
<TimeChanged>66746,37302.7707207</TimeChanged>
<TimeCreated>66746,37302.7707207</TimeCreated>

<Property name="ubrn">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>RequestReferralDetailsDefaultData</DefaultData>
<Data name="RequestReferralDetailsDefaultData">
<Subscript>"RequestReferralDetails"</Subscript>
<Value name="1">
<Value>ubrn</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="RFT.ERS.Classes.RequestWorklist">
<Super>Ens.Request</Super>
<TimeChanged>66746,37302.798703</TimeChanged>
<TimeCreated>66746,37302.798703</TimeCreated>

<Property name="sessionID">
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>RequestWorklistDefaultData</DefaultData>
<Data name="RequestWorklistDefaultData">
<Subscript>"RequestWorklist"</Subscript>
<Value name="1">
<Value>sessionID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="RFT.ERS.Classes.WorklistItem">
<Super>Ens.Response</Super>
<TimeChanged>66746,37302.8043897</TimeChanged>
<TimeCreated>66746,37302.8043897</TimeCreated>

<Property name="specialty">
<Type>%String</Type>
</Property>

<Property name="requestContextStatus">
<Type>%String</Type>
</Property>

<Property name="clinicalInfoPrinted">
<Type>%String</Type>
</Property>

<Property name="clinicalInfoFirstSubmitted">
<Type>%String</Type>
</Property>

<Property name="clinicalInfoLastUpdate">
<Type>%String</Type>
</Property>

<Property name="priority">
<Type>%String</Type>
</Property>

<Property name="patientID">
<Type>%String</Type>
</Property>

<Property name="eRefPathwayStart">
<Type>%String</Type>
</Property>

<Property name="refType">
<Type>%String</Type>
</Property>

<Property name="clinician">
<Type>%String</Type>
</Property>

<Property name="apptStart">
<Type>%String</Type>
</Property>

<Property name="ubrn">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>WorklistItemDefaultData</DefaultData>
<Data name="WorklistItemDefaultData">
<Subscript>"WorklistItem"</Subscript>
<Value name="1">
<Value>specialty</Value>
</Value>
<Value name="2">
<Value>requestContextStatus</Value>
</Value>
<Value name="3">
<Value>clinicalInfoPrinted</Value>
</Value>
<Value name="4">
<Value>clinicalInfoFirstSubmitted</Value>
</Value>
<Value name="5">
<Value>clinicalInfoLastUpdate</Value>
</Value>
<Value name="6">
<Value>priority</Value>
</Value>
<Value name="7">
<Value>patientID</Value>
</Value>
<Value name="8">
<Value>eRefPathwayStart</Value>
</Value>
<Value name="9">
<Value>refType</Value>
</Value>
<Value name="10">
<Value>clinician</Value>
</Value>
<Value name="11">
<Value>apptStart</Value>
</Value>
<Value name="12">
<Value>ubrn</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="RFT.ERS.Classes.WorklistResponse">
<Super>Ens.Response</Super>
<TimeChanged>66746,37302.8168636</TimeChanged>
<TimeCreated>66746,37302.8168636</TimeCreated>

<Property name="Item">
<Type>RFT.ERS.Classes.WorklistItem</Type>
<Collection>list</Collection>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>WorklistResponseDefaultData</DefaultData>
<Data name="WorklistResponseDefaultData">
<Subscript>"WorklistResponse"</Subscript>
<Value name="1">
<Value>Item</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="RFT.ERS.Operation.ERS">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>66746,37302.8625698</TimeChanged>
<TimeCreated>66746,37302.8625698</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.HTTP.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Property name="FhirServer">
<Type>%String</Type>
<InitialExpression>"https://server.fire.ly/r3"</InitialExpression>
</Property>

<Property name="ODSCode">
<Type>%String</Type>
<InitialExpression>"B9J4U"</InitialExpression>
</Property>

<Property name="WorkListSizeLimitMB">
<Type>%Float</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Parameter name="SETTINGS">
<Default>FhirServer,ODSCode,WorkListSizeLimitMB</Default>
</Parameter>

<Method name="RetrieveWorklist">
<FormalSpec>pInput:RFT.ERS.Classes.RequestWorklist,*pResponse:Ens.Response</FormalSpec>
<Implementation><![CDATA[
    set tsc=$$$OK
    
    //create body for http request
    set body={}
    set body.resourceType="Parameters"
    set body.meta={}
    set body.meta.profile=["https://fhir.nhs.uk/STU3/StructureDefinition/eRS-FetchWorklist-Parameters-1"]
    set body.parameter=[]
    
    set parameterObj={}
    set parameterObj.name="listType"
    set parameterObj.valueCodeableConcept={}
    set parameterObj.valueCodeableConcept.coding=[]
    set coding={}
    set coding.system="https://fhir.nhs.uk/STU3/CodeSystem/eRS-ReferralListSelector-1"
    set coding.code="APPOINTMENT_SLOT_ISSUES"
    do parameterObj.valueCodeableConcept.coding.%Push(coding)
    do body.parameter.%Push(parameterObj)

    set stream = ##class(%Stream.GlobalCharacter).%New()
    do stream.WriteLine(body.%ToJSON())
    $$$LOGINFO("body.%ToJSON() : "_body.%ToJSON())
    
    set httpReq=##class(%Net.HttpRequest).%New()
    set httpReq.EntityBody= stream
    set httpReq.Authorization = "Bearer "_^LastToken("auth_token")
    
    set tsc = httpReq.SetHeader("NHSD-End-User-Organisation-ODS",..ODSCode)
    set tsc = httpReq.SetHeader("NHSD-eRS-Business-Function","SERVICE_PROVIDER_CLINICIAN")
    set tsc = httpReq.SetHeader("Content-Type","application/fhir+json")

    set tURL=..Adapter.HTTPServer_"/referrals/FHIR/STU3/ReferralRequest/$ers.fetchworklist"
    $$$TRACE("Endpoint: "_tURL)
    SET tsc=..Adapter.SendFormDataURL(tURL, .tHttpResponse, "POST", httpReq)
   
    #DIM tHttpResponse As %Net.HttpResponse
    
    $$$TRACE("Status Code: "_ tHttpResponse.StatusLine)
    $$$TRACE("tHttpResponse.Data.SizeGet() :"_tHttpResponse.Data.SizeGet())

    // Worklist size
    Set wkListSize = tHttpResponse.Data.SizeGet() / 1000000
    Set wkListSize = $JUSTIFY(wkListSize,0,4)
    Set wkListSizeLimit = $JUSTIFY(..WorkListSizeLimitMB,0,4)

    IF tHttpResponse.StatusCode'=200
    {
        set alert=##class(Ens.AlertRequest).%New()
        set alertText="Error Code: "_tHttpResponse.StatusCode
        set alertText=alertText_" There has been an error in fetching the worklist"
        set alert.AlertText=alertText
        set alert.AlertDestination="Ens.Alert"
        set tsc=..SendAlert(alert)
        $$$ThrowStatus(tsc)
        GOTO END
    }
    
    elseif (tHttpResponse.StatusCode=200) && (wkListSize > wkListSizeLimit)
    {
        set alert=##class(Ens.AlertRequest).%New()
        set alertText="The worklist size "_ wkListSize _"(MB) exceeds the limit "_wkListSizeLimit_"(MB)."
        set alert.AlertText=alertText
        set alert.AlertDestination="Ens.Alert"
        set tsc=..SendAlert(alert)
        Set pResponse = ##class("Ens.StringContainer").%New()
        set pResponse.StringValue = alertText
        ;$$$ThrowStatus(tsc)
        GOTO END
    }
    
    //Extract values from fhir response 
    set data=tHttpResponse.Data
    IF $ISOBJECT(data)
    {
        set obj=[].%FromJSON(data)
        set resp=##class(RFT.ERS.Classes.WorklistResponse).%New()
        set entry=obj.entry
    }
    
    IF $ISOBJECT(entry)
    {
	    set entryIterator=entry.%GetIterator()
        while entryIterator.%GetNext(.key,.entryItem)
        {
            $$$TRACE("ubrn:"_entryItem.item.reference)
	   	    set ref=##class(RFT.ERS.Classes.WorklistItem).%New()
	        set ubrn=entryItem.item.reference
	        set ref.ubrn=$PIECE(ubrn,"/",2)
	        set outerExtensionArray=entryItem.extension
    
	        set extensionObject=outerExtensionArray.extension

	        set innerExtensionArray=extensionObject.extension
	        set innerExtensionIterator=innerExtensionArray.%GetIterator()
	        while innerExtensionIterator.%GetNext(.key,.extensionItem)
	        {
		        if extensionItem.url="priority" 
		    	{
		    		set code=##class(RFT.Utility.CodeableConcept).RetriveCode(extensionItem)
		    		set ref.priority=code
		    	}
		    	if extensionItem.url="specialty"
		    	{		
		    		set code=##class(RFT.Utility.CodeableConcept).RetriveCode(extensionItem)
		    		set ref.specialty=code
		    	}  
    
		    	if extensionItem.url="clinicalInfoPrinted" set ref.clinicalInfoPrinted=extensionItem.valueBoolean
                if extensionItem.url="clinicalInfoLastUpdated" set ref.clinicalInfoLastUpdate=extensionItem.valueDateTime
                if extensionItem.url="patient" set ref.patientID=extensionItem.valueReference.identifier.value    
	        }
            do resp.Item.Insert(ref)
        }
    }   
    set pResponse=resp
END 
    quit tsc
]]></Implementation>
</Method>

<Method name="RetrieveReferralDetails">
<FormalSpec>pInput:RFT.ERS.Classes.RequestReferralDetails,*pResponse:Ens.Response</FormalSpec>
<Implementation><![CDATA[
    set tsc=$$$OK
    
    set httpReq=##class(%Net.HttpRequest).%New()
    set httpReq.Authorization = "Bearer "_^LastToken("auth_token")
    set tsc = httpReq.SetHeader("NHSD-eRS-Business-Function","SERVICE_PROVIDER_CLINICIAN")
    set tsc = httpReq.SetHeader("Accept","application/fhir+json")
    set tsc = httpReq.SetHeader("NHSD-End-User-Organisation-ODS",..ODSCode)
    
    set tURL=..Adapter.HTTPServer_"/referrals/FHIR/STU3/ReferralRequest/"_pInput.ubrn    
    
    SET tsc=..Adapter.SendFormDataURL(tURL, .httpResp, "GET", httpReq)
    #DIM httpResp as %Net.HttpResponse
    $$$TRACE("Status Code: "_ httpResp.StatusLine)
    
    set data=httpResp.Data
    
    IF $ISOBJECT(data)
    {
        set obj=[].%FromJSON(data)
        set resp=##class(RFT.ERS.Classes.ReferralDetailsResponse).%New()
        set refDetails=##class(RFT.ERS.Classes.ReferralDetails).%New()
        
        set extension=obj.extension
        set extIter=extension.%GetIterator()
        while extIter.%GetNext(.key,.extItem)
        
        {
            
          if extItem.url="https://fhir.nhs.uk/STU3/StructureDefinition/Extension-eRS-ReferralPriority-1"
           {
                //set refDetails.priority=extItem.valueCodeableConcept.coding.GetAt(1).code
                               
				set priorityCode=##class(RFT.Utility.CodeableConcept).RetriveCode(extItem)
				set refDetails.priority=priorityCode
				    
            }
                   
        }  
        
        set contained=obj.contained
        set containedIter=contained.%GetIterator()
        while containedIter.%GetNext(.key,.containedItem)
        {
            if containedItem.resourceType="Appointment"
            {
                set refDetails.status=containedItem.status
                IF containedItem.status="booked"
                {
	                set refDetails.apptStart=containedItem.start
               		 set refDetails.apptEnd=containedItem.end	                
                }
            }
            
            if containedItem.resourceType="DocumentReference"
            {
                //grab attachment details
                //may be multiple attch objects inside content array
                set content=containedItem.content
                set contentIter=content.%GetIterator()
               	while contentIter.%GetNext(.key,.contentItem)
                {   
                    set attachment=##class(RFT.ERS.Classes.Attachment).%New()
                    $$$TRACE("Found attachment id: "_contentItem.attachment.id)
                    set attachment.attachmentID=contentItem.attachment.id
                    set attachmentExt=contentItem.attachment.extension
                  
                    if attachmentExt.%Get(0).url="https://fhir.nhs.uk/STU3/StructureDefinition/Extension-eRS-AttachedBy-1"
                    {
                        set attachment.insertedBy=attachmentExt.%Get(0).valueReference.identifier.value
                    }
                    set attachment.contentType=contentItem.attachment.contentType
                    set attachment.url=contentItem.attachment.url
                    set attachment.size=contentItem.attachment.size
                    set attachment.title=contentItem.attachment.title
                    set attachment.createdDateTime=contentItem.attachment.creation

                    do resp.Attachment.Insert(attachment)
                        
                }
                set refDetails.docStatus=containedItem.status
            }
        }
        
        set refDetails.intent=obj.intent
  		Set codingArray=obj.specialty.coding
  		
  		set codingIterator=codingArray.%GetIterator()
  		while codingIterator.%GetNext(.key,.item)
  		{
	  		set refDetails.specialty=item.code
  		}	
		//set refDetails.specialty=obj.specialty.coding
        set refDetails.patientID=obj.subject.identifier.value 
        set resp.Referral=refDetails
        set pResponse=resp
    }   
        
END
    quit tsc
]]></Implementation>
</Method>

<Method name="RetrieveAttachment">
<FormalSpec>pInput:RFT.ERS.Classes.RequestAttachment,*pResponse:Ens.Response</FormalSpec>
<Implementation><![CDATA[
    
    set t = $$$OK
    
    set httpReq=##class(%Net.HttpRequest).%New()
    
    do httpReq.SetHeader("NHSD-eRS-Business-Function","SERVICE_PROVIDER_CLINICIAN")
    do httpReq.SetHeader("X-Correlation-ID","11C46F5F-CDEF-4865-94B2-0EE0EDCC26DA")
    do httpReq.SetHeader("NHSD-End-User-Organisation-ODS",..ODSCode)
    set httpReq.Authorization = "Bearer "_^LastToken("auth_token")
    
    set tURL=..Adapter.HTTPServer_"/referrals/FHIR/STU3/Binary/"_pInput.url    
    SET sc=..Adapter.SendFormDataURL(tURL, .httpResp, "GET", httpReq)
    #DIM httpResp as %Net.HttpResponse
    
    set response=##class(RFT.ERS.Classes.AttachmentResponse).%New()
    set response.StatusCode=httpResp.StatusCode
    
    $$$LOGINFO("StatusCode: "_httpResp.StatusCode)
    
    IF httpResp.StatusCode=200
    {
        // Get NHS Number for file naming
        Set sqlArgument = ##class(%DynamicObject).%New()
        Set sqlArgument.code = pInput.url
        Set sqlArgument.type = "attachmentLogicalID"

        // Get extension
        Set Qry = "SELECT REPLACE(title,' ', '') as TrimmedTitle, ubrn as ubrnQry FROM RFT_ERS_Tables.Attachments WHERE url ='"_pInput.url_"'"

        Set ST=##class(%SQL.Statement).%New()   
        set tsc = ST.%Prepare(Qry)
        if $$$ISERR(tsc) {write "%Prepare failed:" do $SYSTEM.Status.DisplayError(tsc) quit} 
        set rset = ST.%Execute()
        if $$$ISERR(tsc) {write "%Prepare failed:" do $SYSTEM.Status.DisplayError(tsc) quit}

        Set TrimmedTitle = ""
        Set ubrnQry = ""

        $$$TRACE("OutSide While")

        while (rset.%Next()) && (TrimmedTitle = "") && (ubrnQry = "")
        {
            $$$TRACE("Inside While")

            set TrimmedTitle = $PIECE(rset.%Get("TrimmedTitle"),".",1)
            set TrimmedTitle = TrimmedTitle_"_"_$zstrip($zdatetime($horolog,3), "*P")
            Set ubrn = rset.%Get("ubrnQry")

            $$$TRACE("ubrn: "_ubrn)
        }
        if TrimmedTitle = ""
        {
            write "fileExt Not found"
            quit
        }

        // File Extension
        set fileType=httpResp.GetHeader("Content-Type")
        set fileExt=##class(Ens.Util.FunctionSet).Lookup("ERS.ContentTypeToExtension",fileType)

        // Naming file
        Set PatientDetails = ##class(%DynamicObject).%New()
        Set tsc = ..LookUpPatient(sqlArgument, .PatientDetails)

        // create/check download directory
        if ##class(Ens.Director).GetItemSettingValue("DocumentDownloadProcess","Host","DocumentStorageMode",.tsc) = "MOUNTHLY" {set FolderName = $E($ZDT($H,8),1,4)_"-"_$E($ZDT($H,8),5,6)}
		elseif ##class(Ens.Director).GetItemSettingValue("DocumentDownloadProcess","Host","DocumentStorageMode",.tsc) = "UBRN" {set FolderName = ubrn}
        Set OutputDir = ##class(Ens.Director).GetItemSettingValue("DocumentDownloadProcess","Host","OutputDir",.status)_"\"_FolderName
        $$$TRACE("FolderName: "_FolderName)
		Set OutputDirExists=##class(%File).DirectoryExists(OutputDir)
		If ('OutputDirExists) {set tsc=##class(%File).CreateDirectory(OutputDir)}

        // Save file
        set fileName=OutputDir_"\"_PatientDetails.MPI_"_"_PatientDetails.NHSnumber_"_"_PatientDetails.FamilyName _"_"_PatientDetails.GivenName_"_"_TrimmedTitle_"."_fileExt
        set stream=##class(%Stream.FileBinary).%New()
        set t=stream.LinkToFile(fileName)
        set t=stream.CopyFromAndSave(httpResp.Data)

        //add file path to local table 
        set attch=##class(RFT.ERS.Tables.Attachments).%OpenId(pInput.attachmentID)

        IF $ISOBJECT(attch)
        {
            set attch.filePath=fileName
            set t= attch.%Save()

            set response.FilePath=fileName
            set response.FileType=fileExt
        }

    }
    elseif httpResp.StatusCode = 401
    {
        set alert=##class(Ens.AlertRequest).%New()
        set alertText="Error Code: "_httpResp.StatusCode
        set alertText=alertText_" Retrieve attachment method failed due to token expiry."
        set alert.AlertText=alertText
        set alert.AlertDestination="Ens.Alert"
        set t=..SendAlert(alert)
        quit t
    }
    
    $$$TRACE(response.StatusCode)
    set pResponse=response
    
    quit t
]]></Implementation>
</Method>

<Method name="RetrieveClincalInformation">
<FormalSpec>pInput:RFT.ERS.Classes.RequestClinicalInformation,*pResponse:Ens.Response</FormalSpec>
<Implementation><![CDATA[
    set tsc=$$$OK
    
    set httpReq=##class(%Net.HttpRequest).%New()
    set httpReq.Authorization = "Bearer "_^LastToken("auth_token")

    set tsc = httpReq.SetHeader("Accept","application/pdf")
    set tsc = httpReq.SetHeader("NHSD-eRS-Business-Function", "SERVICE_PROVIDER_CLINICIAN")
    set tsc = httpReq.SetHeader("NHSD-End-User-Organisation-ODS",..ODSCode)
    set tsc = httpReq.SetHeader("Content-Type","application/fhir+json")

    set ubrn = pInput.ubrn
    set tURL=..Adapter.HTTPServer_"/referrals/FHIR/STU3/ReferralRequest/"_ubrn_"/$ers.generateCRI"
    
    set StatusCode = 999
    Set Count = ##class(Ens.Director).GetItemSettingValue("DocumentDownloadProcess","Host","AttachmentRetryCount",.tsc)
    
    Try {
        while $FIND("200,404,422", StatusCode)=0 && (Count > 0)
        {
            $$$TRACE("counter: "_Count)
            SET tsc=..Adapter.SendFormDataURL(tURL, .tHttpResponse, "POST", httpReq)
            #DIM tHttpResponse As %Net.HttpResponse

            $$$LOGINFO("Status Code: "_ tHttpResponse.StatusCode)
            Set StatusCode = tHttpResponse.StatusCode
            Set Count = Count - 1
        }
        Set retryCount = ##class(Ens.Director).GetItemSettingValue("DocumentDownloadProcess","Host","AttachmentRetryCount",.tsc) - Count
    }
    Catch ex {
        set alert=##class(Ens.AlertRequest).%New()
        set alertText="Error Code: "_tHttpResponse.StatusCode
        set alertText=alertText_" There has been an error in etrieving clinical information (A007). ubrn: "_ubrn
        set alert.AlertText=alertText
        set alert.AlertDestination="Ens.Alert"
        set tsc=..SendAlert(alert)
        $$$ThrowStatus(tsc)
        Set tsc=ex.AsStatus()
    }

    if StatusCode = 200
    {
        set response=##class(RFT.ERS.Classes.AttachmentResponse).%New()
        set response.StatusCode=tHttpResponse.StatusCode
    
        set data=tHttpResponse.Data
        set respTitle = $PIECE(tHttpResponse.GetHeader("Content-Disposition"),"=",2)
    
        // Get NHS Number for file naming
        Set sqlArgument = ##class(%DynamicObject).%New()
        Set sqlArgument.code = ubrn
        Set sqlArgument.type = "ubrn"

        set stream=##class(%Stream.FileBinary).%New()

        Set PatientDetails = ##class(%DynamicObject).%New()
        Set tsc = ..LookUpPatient(sqlArgument, .PatientDetails)
        $$$LOGINFO("returned to RetrieveClincalInformation")

        // create/check download directory
        if ##class(Ens.Director).GetItemSettingValue("DocumentDownloadProcess","Host","DocumentStorageMode",.tsc) = "MOUNTHLY" {set FolderName = $E($ZDT($H,8),1,4)_"-"_$E($ZDT($H,8),5,6)}
		elseif ##class(Ens.Director).GetItemSettingValue("DocumentDownloadProcess","Host","DocumentStorageMode",.tsc) = "UBRN" {set FolderName = ubrn}

        $$$TRACE("Folder Name: "_FolderName)

        Set OutputDir = ##class(Ens.Director).GetItemSettingValue("DocumentDownloadProcess","Host","OutputDir",.tsc)_"\"_FolderName
		Set OutputDirExists=##class(%File).DirectoryExists(OutputDir)
		If ('OutputDirExists) {set tsc=##class(%File).CreateDirectory(OutputDir)}

	    set fileName=OutputDir_"\"_PatientDetails.MPI_"_"_PatientDetails.NHSnumber_"_"_PatientDetails.FamilyName _"_"_PatientDetails.GivenName_"_ClinicalSummary"
        set fileName=fileName_"_"_$zstrip($zdatetime($horolog,3), "*P")_".pdf"
        set response.FilePath=fileName
		// Copy into PDFs Folder
        Set TargetDir = ##class(Ens.Director).GetItemSettingValue("DocumentDownloadProcess","Host","PDFsFolder",.tsc)_"\"_FolderName
        Set TargetDirExists=##class(%File).DirectoryExists(TargetDir)
        If ('TargetDirExists) {set tsc=##class(%File).CreateDirectory(TargetDir)}

        set tsc=stream.LinkToFile(fileName)
        set tsc=stream.CopyFromAndSave(data)
        set response.FileType="pdf"

        // Virus Scan
        /*
		set ScanCmd = ##class(Ens.Director).GetItemSettingValue("DocumentDownloadProcess","Host","VirusScanCommand",.tsc)_" "_fileName
		$$$TRACE("ScanCmd : "_ScanCmd)
		set runScan = $zf(-1, ScanCmd)
        */

	    set tsc=stream.LinkToFile(fileName)
	    set tsc=stream.CopyFromAndSave(data)

        set cmd= "xcopy "_fileName_" "_TargetDir
        SET runCmd=$ZF(-1,cmd)

        // update DB with clincal summary path
        set InsertQry = "INSERT INTO RFT_ERS_Tables.Attachments (createdDateTime, filePath, isDownloaded, "
        set InsertQry = InsertQry_"retryCount, size, title, ubrn)" ;, url)"
        set InsertQry = InsertQry_" VALUES ("
        set InsertQry = InsertQry_$ZDATE($PIECE($H,",",1))_", "
        set InsertQry = InsertQry_"'"_fileName_"', "
        set InsertQry = InsertQry_"1"_", "
        set InsertQry = InsertQry_retryCount_", "
        set InsertQry = InsertQry_"'"_stream.SizeGet()_"', "
        set InsertQry = InsertQry_"'"_respTitle_"', "
        set InsertQry = InsertQry_"'"_ubrn_"')"

        $$$TRACE(InsertQry)

        Set ST=##class(%SQL.Statement).%New()   
        set tsc = ST.%Prepare(InsertQry)
        if $$$ISERR(tsc) {write "%Prepare failed:" do $SYSTEM.Status.DisplayError(tsc) quit} 
        set rset = ST.%Execute()
        if $$$ISERR(tsc) {write "%Prepare failed:" do $SYSTEM.Status.DisplayError(tsc) quit}
    }

    if response
    {
        set pResponse=response
    }
    
    
    quit tsc
]]></Implementation>
</Method>

<Method name="LookUpPatient">
<FormalSpec>pInupt:%DynamicObject,*PatientDetails:%DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set tsc = $$$OK

    Try
    {
        set PatientDetails = ##class(%DynamicObject).%New()

        if pInupt.type '= "PatientID"
        {
            if pInupt.type = "attachmentLogicalID"
            {
                Set Qry = "SELECT w.patientID, w.ubrn, w.specialty FROM RFT_ERS_Tables.Worklist w INNER JOIN RFT_ERS_Tables.Attachments a ON w.ubrn = a.ubrn where a.url = '"_pInupt.code_"'"
            }
            elseif pInupt.type = "ubrn"
            {
                Set Qry = "SELECT patientID, ubrn, specialty FROM RFT_ERS_Tables.Worklist where ubrn='"_pInupt.code_"'"
            }

            Set ST=##class(%SQL.Statement).%New()   
            set tsc = ST.%Prepare(Qry)
            if $$$ISERR(tsc) {$$$ThrowStatus(tsc)}
            set rset = ST.%Execute()
            if $$$ISERR(tsc) {$$$ThrowStatus(tsc)}

            Set PatientID = ""
            while (rset.%Next()) && (PatientID = "")
            {
                set PatientID = rset.%Get("patientID")
                set ubrn = rset.%Get("ubrn")
                set specialty = rset.%Get("specialty")
                $$$TRACE("PatientID :"_PatientID)
                $$$TRACE("ubrn :"_ubrn)
                $$$TRACE("specialty :"_specialty)
            }
            if PatientID = ""
            {
                write "PatientID Not found"
                quit
            }
        }
        elseif pInupt.type = "PatientID"
        {
            set PatientID = pInupt.code
        }

        $$$TRACE("LOOKUP PATIENT : "_PatientID)

        set PatientDetails.NHSnumber = PatientID

        // Get Patient resource from FHIR Server
        set httpReq=##class(%Net.HttpRequest).%New()
        set tURL=..FhirServer_"/Patient?identifier="_PatientID
        set tsc=..Adapter.SendFormDataURL(tURL, .tHttpResponse, "GET", httpReq)

	    set response=##class(RFT.ERS.Classes.HttpResponse).%New()

	    set response.StatusCode= tHttpResponse.StatusCode
	    set response.ResponseBody=tHttpResponse.Data.Read()
        $$$TRACE("response.ResponseBody :"_response.ResponseBody)

        set RespObj = ##class(%DynamicAbstractObject).%FromJSON(response.ResponseBody)
    
	    if response.StatusCode = 200
	    {
	        if RespObj.total = 0
            {
                set alert=##class(Ens.AlertRequest).%New()
                set alertText="Cannot perform the patient demographics look-up process, no records were found in the FHIR server for patient: "_PatientID
                set alert.AlertText=alertText
                set alert.AlertDestination="Ens.Alert"
                set tsc=..SendAlert(alert)
                $$$ThrowStatus(tsc)
            }

            set IdentifierArray = RespObj.entry.%Get(0).resource.identifier
            // Extracting MPI
            set MPI = ""
            set iter = IdentifierArray.%GetIterator()
            While iter.%GetNext(.key , .value)
            {
                if IdentifierArray.%Get(key).system = "https://fhir.nhs.uk/Id/local-patient-identifier"
                {
                    Set MPI = IdentifierArray.%Get(key).value
                }
            }

            if MPI = ""
            {
                write "MPI Not found"
                quit
            }

            set PatientDetails.MPI = MPI
            // Extracting name
            set NameArray = RespObj.entry.%Get(0).resource.name
            set GivenName = ""
            set FamilyName = ""
            set iter = NameArray.%GetIterator()
            While iter.%GetNext(.key , .value)
            {
                if NameArray.%Get(key).use = "official"
                {
                    set GivenNameArray = NameArray.%Get(key).given
                    set iterGN = GivenNameArray.%GetIterator()
                    While iterGN.%GetNext(.keyName , .value)
                    {
                        // GiveName
                        if GivenName '="" {Set GivenName = GivenName_"-"_$ZCONVERT(GivenNameArray.%Get(keyName), "W")}
                        else {Set GivenName = $ZCONVERT(GivenNameArray.%Get(keyName), "W")}
                    }

                    // FamilyName
                    if FamilyName '="" {Set FamilyName = FamilyName_"-"_$ZCONVERT(NameArray.%Get(key).family, "U")}
                    else {Set FamilyName = $ZCONVERT(NameArray.%Get(key).family, "U")}
                }
            }

            if (GivenName = "") || (FamilyName = "") {$$$ThrowStatus(tsc)}

            set PatientDetails.GivenName = GivenName
            set PatientDetails.FamilyName = FamilyName
            set PatientDetails.Gender = $ZCONVERT($EXTRACT(RespObj.entry.%Get(0).resource.gender), "W") //Gender
            set PatientDetails.dob = RespObj.entry.%Get(0).resource.birthDate //dob

            // Address
            set AddressArray = RespObj.entry.%Get(0).resource.address
            set Address1 = ""
            set Address2 = ""
            set Address3 = ""
            set iterAd = AddressArray.%GetIterator()
            While iterAd.%GetNext(.keyAddress , .value)
            {
                set keyhomeAdd = -1
                if AddressArray.%Get(keyAddress).use = "home" {set keyhomeAdd = keyAddress}
            }

            if keyhomeAdd >= 0
            {
                set AddLineArray = AddressArray.%Get(keyhomeAdd).line
                set postalCode = AddressArray.%Get(keyhomeAdd).postalCode
            }
            else
            {
                set AddLineArray = AddressArray.%Get(0).line
                set postalCode = AddressArray.%Get(0).postalCode

            }

            set iterLn = AddLineArray.%GetIterator()
            While iterLn.%GetNext(.keyLine , .value)
            {
                if keyLine = 0 {set Address1 = AddLineArray.%Get(keyLine)}
                elseif keyLine = 1 {set Address2 = AddLineArray.%Get(keyLine)}
                elseif keyLine = 2 {set Address3 = AddLineArray.%Get(keyLine)}
                elseif keyLine > 2 {set Address3 = Address3_" "_AddLineArray.%Get(keyLine)}
            }

            Set PatientDetails.Address1 = Address1
            Set PatientDetails.Address2 = Address2
            Set PatientDetails.Address3 = Address3
            Set PatientDetails.postalCode = postalCode

            //Phone
            set TelecomArray = RespObj.entry.%Get(0).resource.telecom
            set iterTC = TelecomArray.%GetIterator()
            set mobile = 0
            set home = 0
            set work = 0

            While iterTC.%GetNext(.keyTC , .value)
            {
                if (TelecomArray.%Get(keyTC).use = "mobile")
                {
                    set mobile = $ZSTRIP(TelecomArray.%Get(keyTC).value,"*A")
                    set mobile = $ZSTRIP(mobile,"*P")
                }
                elseif TelecomArray.%Get(keyTC).use = "home"
                {
                    set home = $ZSTRIP(TelecomArray.%Get(keyTC).value,"*A")
                    set home = $ZSTRIP(home,"*P")
                }
                elseif TelecomArray.%Get(keyTC).use = "work"
                {
                    set work = $ZSTRIP(TelecomArray.%Get(keyTC).value,"*A")
                    set work = $ZSTRIP(work,"*P")
                }
                elseif TelecomArray.%Get(keyTC).use = "temp"
                {
                    set temp = $ZSTRIP(TelecomArray.%Get(keyTC).value,"*A")
                    set temp = $ZSTRIP(temp,"*P")
                }
            }
            if $Length(mobile) > 9 {set PatientDetails.phone = mobile}
            elseif $Length(home) > 9 {set PatientDetails.phone = home}
            elseif $Length(work) > 9 {set PatientDetails.phone = work}
            elseif $Length(temp) > 9 {set PatientDetails.phone = temp}
            else {set PatientDetails.phone = ""}
	    }

        $$$TRACE("LOOKUP PATIENT OK")

    }

    Catch
    {

    }

    

    quit tsc
]]></Implementation>
</Method>

<Method name="ExtractPatientID">
<FormalSpec>Input:Ens.StringContainer,*DmgContainer:Ens.StringContainer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set tsc = $$$OK
    $$$TRACE(Input.StringValue)
    set PatientID = ##class(%DynamicAbstractObject).%FromJSON(Input.StringValue)
    $$$TRACE(PatientID.code)
    $$$TRACE(PatientID.type)

    Set tsc = ..LookUpPatient(PatientID, .PatientDetails)
    Set DmgContainer = ##class(Ens.StringContainer).%New()
	Set DmgContainer.StringValue = PatientDetails.%ToJSON() 

    quit tsc
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
<MapItem MessageType="RFT.ERS.Classes.RequestWorklist">
<Method>RetrieveWorklist</Method>
</MapItem>
<MapItem MessageType="RFT.ERS.Classes.RequestReferralDetails">
<Method>RetrieveReferralDetails</Method>
</MapItem>
<MapItem MessageType="RFT.ERS.Classes.RequestClinicalInformation">
<Method>RetrieveClincalInformation</Method>
</MapItem>
<MapItem MessageType="RFT.ERS.Classes.RequestAttachment">
<Method>RetrieveAttachment</Method>
</MapItem>
<MapItem MessageType="Ens.StringContainer">
<Method>ExtractPatientID</Method>
</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="RFT.ERS.Operation.ExecuteQuery">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>66746,37302.8802699</TimeChanged>
<TimeCreated>66746,37302.8802699</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.SQL.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="UpdateData">
<FormalSpec>pRequest:Ens.StringContainer,*pResponse:Ens.Response</FormalSpec>
<Implementation><![CDATA[
		Set sc = $$$OK
	Try {
		Set pResponse = ##class(EnsLib.SQL.Snapshot).%New()
		Set SQL = pRequest.StringValue
	
		Set sc = ..Adapter.ExecuteUpdate(.pResponse, SQL) 
		

	}
	Catch Ex {
		Set sc = Ex.AsStatus()
	}
	
	quit sc
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
  <MapItem MessageType="Ens.StringContainer">
    <Method>UpdateData</Method>
  </MapItem>
  </MapItems>
]]></Data>
</XData>
</Class>


<Class name="RFT.ERS.Process.ClinicalInformationProcessor">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>66746,37302.8859743</TimeChanged>
<TimeCreated>66746,37302.8859743</TimeCreated>

<Method name="OnRequest">
<FormalSpec>pInput:RFT.ERS.Classes.RequestReferralDetails,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tsc = $$$OK
	set req=##class(RFT.ERS.Classes.RequestClinicalInformation).%New()
	set req.ubrn=pInput.ubrn
	set t=..SendRequestSync("HttpOut_ERS",req,.refResp)
	if refResp
	{
		set workListItem=##class(RFT.ERS.Tables.Worklist).%OpenId(req.ubrn)
		set workListItem.UpdatePatientDB=1
		$$$LOGINFO("workListItem.UpdatePatientDB=1")
	}
	quit tsc
]]></Implementation>
</Method>

<Method name="GenerateAlert">
<FormalSpec>AlertText:%String</FormalSpec>
<Implementation><![CDATA[
	set t=$$$OK
	
	set alert=##class(Ens.AlertRequest).%New()
	set alert.AlertText=AlertText
	set alert.AlertDestination="Ens.Alert"
	set t=..SendAlert(alert)
	quit t
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="RFT.ERS.Process.DocumentProcessor">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>66746,37302.900059</TimeChanged>
<TimeCreated>66746,37302.900059</TimeCreated>

<Property name="LibreOffice">
<Type>%String</Type>
<InitialExpression>"C:\Program Files\LibreOffice\program\soffice.exe"</InitialExpression>
</Property>

<Property name="AllowedFiles">
<Type>%String</Type>
<InitialExpression>"docx,doc,txt,rtf,tif,jpeg"</InitialExpression>
</Property>

<Property name="OutputDir">
<Type>%String</Type>
<InitialExpression>"C:\"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="PDFsFolder">
<Type>%String</Type>
<InitialExpression>"C:\"</InitialExpression>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DocumentStorageMode">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",MOUNTHLY,UBRN"/>
</Property>

<Property name="AttachmentRetryCount">
<Type>%Integer</Type>
<InitialExpression>5</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Property VirusScanCommand As %String [ InitialExpression = "%PROGRAMFILES%\Windows Defender\MPCMDRUN.exe" ];

]]></Content>
</UDLText>

<Parameter name="SETTINGS">
<Default>LibreOffice,OutputDir,PDFsFolder,DocumentStorageMode,AttachmentRetryCount,AllowedFiles</Default>
</Parameter>

<Method name="OnRequest">
<FormalSpec>pInput:RFT.ERS.Classes.RequestAttachment,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set t=$$$OK
	$$$TRACE("START DOWNLOAD PROCESS :"_pInput.attachmentID)
	$$$LOGINFO("pInput.attachmentID : "_pInput.attachmentID)
	set t=..SendRequestSync("HttpOut_ERS",pInput,.resp)
	#DIM resp As RFT.ERS.Classes.AttachmentResponse
	set attach=##class(RFT.ERS.Tables.Attachments).%OpenId(pInput.attachmentID)
	
	$$$LOGINFO("resp.StatusCode : "_resp.StatusCode)
	
	IF (resp.StatusCode=200) && (resp.FilePath'="")
	{
		set filePath=resp.FilePath
		set fileType=resp.FileType

		$$$TRACE("filePath / fileType: "_filePath_"/"_fileType)
		
        // create/check PDFs directory "MM-YYYY"
		if ..DocumentStorageMode = "MOUNTHLY" {set FolderName = $E($ZDT($H,8),1,4)_"-"_$E($ZDT($H,8),5,6)}
		elseif ..DocumentStorageMode = "UBRN" {set FolderName = attach.ubrn}

		$$$TRACE("FolderName :"_FolderName)

		Set TargetDir = ..PDFsFolder_"\"_FolderName
		Set TargetDirExists=##class(%File).DirectoryExists(TargetDir)
		If ('TargetDirExists) {set tsc=##class(%File).CreateDirectory(TargetDir)} //Create the PDF directory if doesn't exist
		
		// Virus Scan
		/*
		set ScanCmd = ..VirusScanCommand_" "_filePath
		$$$TRACE("ScanCmd : "_ScanCmd)
		set runScan = $zf(-1, ScanCmd)
		*/

		// Check if the scanned file is always available and convert to PDF if needed
		IF ##class(%File).Exists(filePath) 
		{
			// PDF convert if needed + copy to final directory
			if fileType = "pdf"
			{
				set cmd= "copy "_filePath_" "_TargetDir
				SET runCmd=$ZF(-1,cmd)
			}
			elseif fileType'="pdf"
			{
				set cmd=""""_..LibreOffice_""""_" --headless --writer --convert-to pdf "_filePath_" --outdir "_TargetDir
				SET runCmd=$ZF(-1,cmd)
			}
			//update local list
			$$$TRACE("PDF File saved. Attchment ID: "_pInput.attachmentID)
			IF $ISOBJECT(attach)
			{
				$$$TRACE("Updating local list. attach.filePath : "_attach.filePath)
				set attach.isDownloaded=1
				do attach.%Save()
			}	
		}
	}
	ELSE
	{
		//set retry count
		set attach.retryCount=attach.retryCount+1
		IF attach.retryCount>=..AttachmentRetryCount
		{
			$$$LOGWARNING("Reached retry max - deleting from local list")
			do attach.%Delete()
			do attach.%Save()
		}
	}
	quit t
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>DocumentProcessorDefaultData</DefaultData>
<Data name="DocumentProcessorDefaultData">
<Subscript>"DocumentProcessor"</Subscript>
<Value name="1">
<Value>LibreOffice</Value>
</Value>
<Value name="2">
<Value>AllowedFiles</Value>
</Value>
<Value name="3">
<Value>OutputDir</Value>
</Value>
<Value name="4">
<Value>PDFsFolder</Value>
</Value>
<Value name="5">
<Value>AttachmentRetryCount</Value>
</Value>
<Value name="6">
<Value>VirusScanCommand</Value>
</Value>
<Value name="7">
<Value>DocumentStorageMode</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="RFT.ERS.Process.HL7Process">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>66746,37302.9677116</TimeChanged>
<TimeCreated>66746,37302.9677116</TimeCreated>

<Method name="OnRequest">
<FormalSpec>pRequest:EnsLib.HL7.Message,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set t=$$$OK
	
	Set msg=pRequest
	set nhs="" set mrn=""

	//Loop through PID to get NHS && MRN
	set x=msg.FindSegmentValues("PID:3(*)")
	for i=1:1:x
		{
			
			if msg.FindSegmentValues("PID:3("_i_").5")="SS"
			{
				set nhs=msg.FindSegmentValues("PID:3("_i_").1")
					
			}
				if msg.FindSegmentValues("PID:3("_i_").5")="MR"
			{
				set mrn=msg.FindSegmentValues("PID:3("_i_").1")
					
			}
			
			
	}
	$$$TRACE("NHS NUMBER : "_nhs)	
		
	IF nhs=""
	{	
		$$$TRACE("NO NHS NUMBER FOUND. DISCARDING MESSAGE")
		GOTO END
	}	
	
	//Check NHS Numb against worklist to see if we need to send to DB
	
	set ubrn="" set specialty=""
	&sql(SELECT ubrn,specialty into :ubrn,:specialty FROM RFT_ERS_Tables.Worklist WHERE patientID=:nhs)
	
	IF ubrn=""
	{
		$$$TRACE("PATIENT NOT ON WORKLIST. DISCARDING MESSAGE. NHS NUMBER : "_nhs)
		GOTO END
	}	
	
	$$$TRACE("Patient exists on worklist. NHS NUMBER : "_nhs)
	
	//Get message type
	
	set messageType=msg.FindSegmentValues("MSH:9.2")
	
	IF messageType="S12"
	{
		
		$$$TRACE("EXTRACTING VALUES FROM HL7")
		set lastName=msg.FindSegmentValues("PID:5(1).1.1")
		set firstName=msg.FindSegmentValues("PID:5(1).2")
		set sex=msg.FindSegmentValues("PID:8")
		set dob=msg.FindSegmentValues("PID:7.1")
		set addressOne=msg.FindSegmentValues("PID:11.1")
		set addressTwo=msg.FindSegmentValues("PID:11.2")
		set addressThree=msg.FindSegmentValues("PID:11.3")
		set postcode=msg.FindSegmentValues("PID:11.5")
		set contactNumber=msg.FindSegmentValues("PID:13.1")
		
		set qry="INSERT INTO patients (pat_ubrn,pat_mrn,pat_nhs,pat_familyName,pat_givenName,pat_sex,pat_dob,"
		set qry=qry_"pat_addressOne,pat_addressTwo,pat_addressThree,pat_PostCode,pat_contactNumber,pat_speciality,"
		set qry=qry_"rec_Updated,rec_UpdatedBy) VALUES ('"_ubrn_"','"_mrn_"','"_nhs_"','"_lastName_"','"_firstName_"','"
		set qry=qry_sex_"','"_dob_"','"_addressOne_"','"_addressTwo_"','"_addressThree_"','"_postcode_"','"_contactNumber_"','"_specialty_"','"
		set qry=qry_$zdatetime($horolog,3)_"','TIE')"	
		quit t
		
	}
	
			

	
	
	

	

		
	
END	
	quit t
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="RFT.ERS.Process.RefToDB">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>66746,37302.9890946</TimeChanged>
<TimeCreated>66746,37302.9890946</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Method OnRequest(pInput As RFT.ERS.Classes.RefToDB, Output pResponse As Ens.Response) As %Status

]]></Content>
</UDLText>

<Method name="OnRequest">
<FormalSpec>pInput:Ens.Request,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set t=$$$OK 

	Set ClassType = $CLASSNAME(pInput)
	$$$LOGINFO("ClassType : "_ClassType)

	if ClassType= "RFT.ERS.Classes.RefToDB"
	{
		set ubrn=pInput.ubrn
	
		set referral=##class(RFT.ERS.Tables.Referrals).%OpenId(ubrn)

		$$$LOGINFO(referral)

		IF $ISOBJECT(referral)
		{
			//Insert referral into external DB 
			;set refQry="INSERT INTO ersdocs_workflow.ersRefReq_Details "
			set refQry="INSERT INTO dbo.ersRefReq_Details "
			set refQry=refQry_"(RefReq_UniqueID,RefReq_NHSNo,RefReq_UBRN,RefReq_TrustNACS,Appt_StDttm,Appt_EndDttm,RefReq_Specialty,RefReq_Status,"
			set refQry=refQry_"RefReq_intent,RefReq_Priority,RefReq_Noofdocs,RefReq_FullURL,rec_UpdatedBy,rec_insertedBy) "
			set refQry=refQry_"VALUES ('"_ubrn_"','"_referral.patientID_"','"_referral.ubrn_"','RFR','"_referral.apptStart_"','"_referral.apptEnd_"','"_referral.specialty_"','"
			set refQry=refQry_referral.status_"','"_referral.intent_"','"_referral.priority_"','"_referral.NumDocs_"','"
			set refQry=refQry_##class(Ens.Director).GetAdapterSettingValue("HttpOut_ERS","URL",.status)_"/referrals/FHIR/STU3/ReferralRequest/"_ubrn_"','TIE','TIE')"
			$$$LOGINFO(refQry)

			set insertRef=##class(Ens.StringContainer).%New()
			set insertRef.StringValue=refQry
			set t=..SendRequestSync("ERS_DB_UPDATE",insertRef)

			//get doc status
			set docStatus=referral.docStatus

			set attachmentID="" set contentType="" set createdDateTime="" set insertedBy="" set size="" 
			set title="" set url="" set filePath=""

			//Get all attachment details 
			//We will use embedded sql and doc cursor to ensure we grab all records
			&sql(DECLARE DocCursor CURSOR FOR SELECT attachmentID, contentType, createdDateTime, insertedBy, size, title, url,filePath
			into :attachmentID,:contentType,:createdDateTime,:insertedBy,:size,:title,:url,:filePath FROM RFT_ERS_Tables.Attachments
			WHERE isDownloaded=1 )

			&sql(OPEN DocCursor)			

			FOR {&SQL(FETCH DocCursor)

				$$$LOGINFO("here")

				QUIT:SQLCODE	
				set attchQry="INSERT INTO dbo.ersdoc_attachments " 
				set attchQry=attchQry_"(RefDoc_UniqueID,RefDocStatus,Attach_ID,Attach_InsertedBy,Attach_ContentType,Attach_URL,Attach_Size,Attach_Title,Attach_CrtdDTTM,"
				set attchQry=attchQry_"DocDownloadURL,DocLocationURI,rec_Updated) "
				set attchQry=attchQry_"VALUES ('"_ubrn_"','"_docStatus_"','"_attachmentID_"','"_insertedBy_"','"
				set attchQry=attchQry_contentType_"','"_url_"','"_size_"','"_title_"','"_createdDateTime_"','"
				set attchQry=attchQry_##class(Ens.Director).GetAdapterSettingValue("HttpOut_ERS","URL",.status)_"/referrals/FHIR/STU3/Binary/"
				set attchQry=attchQry_url_"','"_filePath_"','"_$zdatetime($horolog,3)_"')"
				$$$LOGINFO(attchQry)

				set insertAttachment=##class(Ens.StringContainer).%New()
				set insertAttachment.StringValue=attchQry
				set t=..SendRequestSync("ERS_DB_UPDATE",insertAttachment)
				}

			&sql(CLOSE DocCursor)

		}	

	}
	
	elseif ClassType = "Ens.StringContainer"
	{
		//Extract Dynamic object from StreamContainter
		// Lookup patient demographics from FHIR server
		set t=..SendRequestSync("HttpOut_ERS",pInput, .DmgContainer)
    	set PatientDetails = ##class(%DynamicAbstractObject).%FromJSON(DmgContainer.StringValue)


		// Build query to fetch patientID (NHS Number)
		//Check if nhs number and DOB exist
    	Set Qry = "SELECT COUNT(*) FROM dbo.patients WHERE pat_nhs = '"_PatientDetails.NHSnumber_"' and pat_dob = '"_PatientDetails.dob_"';"
    	//update if nhs number exists
    	$$$TRACE("MPI:"_PatientDetails.MPI)
    	Set Qry = Qry_"UPDATE dbo.patients SET pat_mrn = '"_PatientDetails.MPI
    	Set Qry = Qry_"', pat_familyName = '"_PatientDetails.FamilyName_"', pat_givenName = '"_PatientDetails.GivenName_"', pat_sex = '"_PatientDetails.Gender
    	Set Qry = Qry_"', pat_addressOne = '"_PatientDetails.Address1_"', pat_addressTwo = '"_PatientDetails.Address2_"', pat_addressThree = '"_PatientDetails.Address3
    	Set Qry = Qry_"', pat_PostCode = '"_PatientDetails.postalCode
		Set Qry = Qry_"', pat_contactNumber = '"_PatientDetails.phone
    	Set Qry = Qry_"' WHERE pat_nhs = '"_PatientDetails.NHSnumber_"' and rec_UpdatedBy = 'TIE'; "
    	//Insert if nhs number is new
    	Set Qry = Qry_"INSERT INTO dbo.patients (pat_mrn, pat_nhs, pat_familyName, pat_givenName, pat_sex, pat_dob, pat_addressOne, pat_addressTwo, pat_addressThree, "
    	Set Qry = Qry_"pat_PostCode, pat_contactNumber, rec_UpdatedBy) "
    	Set Qry = Qry_"SELECT '"_PatientDetails.MPI_"', '"_PatientDetails.NHSnumber_"', '"_PatientDetails.FamilyName_"', '"_PatientDetails.GivenName_"', '"_PatientDetails.Gender
    	Set Qry = Qry_"', '"_PatientDetails.dob_"', '"_PatientDetails.Address1_"', '"_PatientDetails.Address2_"', '"_PatientDetails.Address3_"', '"_PatientDetails.postalCode
    	Set Qry = Qry_"', '"_PatientDetails.phone_"', 'TIE'"
    	Set Qry = Qry_" WHERE NOT EXISTS (SELECT * FROM dbo.patients WHERE pat_nhs = '"_PatientDetails.NHSnumber_"' and pat_dob = '"_PatientDetails.dob_"');"

		// Send query to ODBC operation
		set insertAttachment=##class(Ens.StringContainer).%New()
		set insertAttachment.StringValue=Qry
		$$$LOGINFO("insertAttachment.StringValue : "_insertAttachment.StringValue)

    	Try
		{
			set t=..SendRequestSync("ERS_DB_UPDATE",insertAttachment)

			Set QryWL = "SELECT * FROM RFT_ERS_Tables.Worklist where patientID='"_PatientDetails.NHSnumber_"'"

			Set ST=##class(%SQL.Statement).%New()   
        	set tsc = ST.%Prepare(QryWL)
        	if $$$ISERR(tsc) {write "%Prepare failed:" do $SYSTEM.Status.DisplayError(tsc) quit}
        	set rset = ST.%Execute()
        	if $$$ISERR(tsc) {write "%Prepare failed:" do $SYSTEM.Status.DisplayError(tsc) quit}

        	while rset.%Next()
        	{
				set workListItem=##class(RFT.ERS.Tables.Worklist).%OpenId(rset.%Get("ID"))
				set workListItem.UpdatePatientDB = 1
				do workListItem.%Save()
        	}

		}
    	Catch ex {
    	    if $$$ISERR(t)
			{
				$$$LOGERROR("Update patients demographics failed")
			}
    	    $$$ThrowStatus(t)
    	    Set t=ex.AsStatus()
    	}	


	}
	

	
	
		
	
	
	q t
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="RFT.ERS.Process.ReferralProcessor">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>66746,37302.9713997</TimeChanged>
<TimeCreated>66746,37302.9713997</TimeCreated>

<Method name="OnRequest">
<FormalSpec>pInput:RFT.ERS.Classes.RequestReferralDetails,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set t=$$$OK
	$$$TRACE(pInput.ubrn)
	
	//Query ERS API for referral details
	set t=..SendRequestSync("HttpOut_ERS",pInput,.refResp)
	#DIM refResp As RFT.ERS.Classes.ReferralDetailsResponse

	IF t
	{
		set ref=##class(RFT.ERS.Tables.Referrals).%OpenId(pInput.ubrn)
		
		IF '$ISOBJECT(ref)
		{
			$$$TRACE("Adding new entry to local list")
			set ref=##class(RFT.ERS.Tables.Referrals).%New()
		}
		
		set ref.patientID=refResp.Referral.patientID
		if refResp.Referral.apptStart'="" set ref.apptStart=refResp.Referral.apptStart
		if refResp.Referral.apptEnd'="" set ref.apptEnd=refResp.Referral.apptEnd
		set ref.specialty=refResp.Referral.specialty
		set ref.status=refResp.Referral.status
		set ref.intent=refResp.Referral.intent
		set ref.priority=refResp.Referral.priority
		set ref.docStatus=refResp.Referral.docStatus
		set ref.ubrn=pInput.ubrn
		set ref.statusFlag=0

		//count the number of attachments in response
		set numbDocs=0
		
		//set previousNumbDocs=ref.NumDocs
		for i=1:1:refResp.Attachment.Count()
		{
			set attchItem=refResp.Attachment.GetAt(i)
			set attach=##class(RFT.ERS.Tables.Attachments).%New()
			set numbDocs=numbDocs+1
			
			IF attchItem.size>5242880
			{
			
				$$$TRACE("Attachment too large")
				//This will error if we try to download
				//Send email alert 			
				set errorText="The attachment ID: "_attchItem.attachmentID
				set errorText=errorText_" for UBRN: "_pInput.ubrn_" is too large "
				set errorText=errorText_" please only upload files below 5mb"
				set t=..GenerateAlert(errorText)
			
			GOTO END
			
			}
		
			set attach.size=attchItem.size
			
			set attId=attchItem.attachmentID
			set url=$P(attchItem.url,"/",2)
			set attach.attachmentID=attId
			$$$LOGINFO("adding id: "_attId)
			set attach.insertedBy=attchItem.insertedBy
			//set attach.contentType=attchItem.contentType
			set attach.url=url
			set attach.title=attchItem.title
			set attach.createdDateTime=attchItem.createdDateTime
			set attach.ubrn=pInput.ubrn 
			set attach.isDownloaded=0
				
			set t=attach.%Save()
			IF '$$$ISERR(t) $$$TRACE("Attachment details saved")
				
			$$$TRACE("Now trying to download attachment")				
				
			set req=##class(RFT.ERS.Classes.RequestAttachment).%New()
			set req.url=url
			set req.attachmentID=attId
			set t=..SendRequestSync("DocumentDownloadProcess",req,.resp)
				
END					
			}	
			
		$$$LOGINFO("numbDocs :"_numbDocs)
		set ref.NumDocs=numbDocs
		set t=ref.%Save()
		IF '$$$ISERR(t) $$$TRACE("Referral saved to local list")
	}
	
	$$$LOGINFO("refResp :"_refResp)
	
	;IF refResp.StatusCode = "200,422,404"
	IF $FIND("200,422,404", refResp.StatusCode ) '= 0
	{
		//If api call returns at 404 or 422 we do not need to try again 
		//update status flag in worklist
		
		set workListItem=##class(RFT.ERS.Tables.Worklist).%OpenId(pInput.ubrn)
		set workListItem.statusFlag=1
		do workListItem.%Save()

	}		
	
	// Clinical Information
	set t=..SendRequestSync("HttpOut_ERS",pInput,.refResp)
	// 
	
	
	quit t
]]></Implementation>
</Method>

<Method name="GenerateAlert">
<FormalSpec>AlertText:%String</FormalSpec>
<Implementation><![CDATA[
	set t=$$$OK
	
	$$$LOGINFO("HELLO")	
	set alert=##class(Ens.AlertRequest).%New()
	set alert.AlertText=AlertText
	set alert.AlertDestination="Ens.Alert"
	set t=..SendAlert(alert)
	quit t
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="RFT.ERS.Process.WorklistProcessor">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>66746,37303.1934449</TimeChanged>
<TimeCreated>66746,37302.9962584</TimeCreated>

<Method name="OnRequest">
<FormalSpec>pRequest:Ens.Request,*pResponse:Ens.StringContainer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set t=$$$OK
	
	//Request worklist from ERS 
	
	set req=##class(RFT.ERS.Classes.RequestWorklist).%New()
	set req.sessionID=1
	
	set t=..SendRequestSync("HttpOut_ERS",req,.worklistResponse)

	Set ClassType = $CLASSNAME(worklistResponse)
	$$$LOGINFO("ClassType : "_ClassType)

	if ClassType= "Ens.StringContainer"
	{
		Set pResponse = ##class(Ens.StringContainer).%New()
		;set pResponse.StringValue = "{"_worklistResponse.StringValue_"}"
		set pResponse.StringValue = "{"_$c(34)_"responseCode"_$c(34)_":200,"_$c(34)_"message"_$c(34)_":"_$c(34)_"OK"_$c(34)_"}"
		GOTO END
	}
	
	IF '$$$ISERR(t)
	{
	
	#DIM worklistResponse As RFT.ERS.Classes.WorklistResponse
	
	//Loop through response
	//add worklist to local list
		for i=1:1:worklistResponse.Item.Count()
		{
			set item=worklistResponse.Item.GetAt(i)
			set ubrn=item.ubrn
			//First check if ubrn exists in local list
			set workList=##class(RFT.ERS.Tables.Worklist).%OpenId(ubrn)

			IF $ISOBJECT(workList)
			{	 //We need to check if there is an update been made on ERS thats not been updated locally

				$$$TRACE("UBRN "_ubrn_" exists on local list")
				set localLastUpdated=workList.clinicalInfoLastUpdate


				if $ISOBJECT(item.clinicalInfoLastUpdate) 
				{
					set ersLastUpdate=item.clincicalInfoLastUpdate
				}else
				{
					set ersLastUpdate=item.clinicalInfoFirstSubmitted
				}

				set dateDiff=##class(%SYSTEM.SQL).DATEDIFF("ss",localLastUpdated,ersLastUpdate)		
				
				//get username
				set Username = $USERNAME
	 			$$$TRACE("Username "_Username)
	 			
				//code seg to create Audit event on response from server
				Set ProdNS = $SYSTEM.SYS.NameSpace()
				$$$TRACE(ProdNS)
				Set $Namespace = "%SYS" ; Switch to the target namespace
				//source, type, name
				set AuditEvent = ##class(Security.Events).Exists(Username, "WorkList Retrieval", "ERSResponse")
				Set $Namespace = ProdNS ; Switch back to the original namespace
				$$$LOGINFO("AuditEvent Exists? 1 = yes, 0 = no"_AuditEvent)
				
				//create audit event if doesn't exist
				if AuditEvent = 0 {
				Set $Namespace = "%SYS" ; Switch to the target namespace
				Set status = ##class(Security.Events).Create(Username,"WorkList Retrieval","ERSResponse","Description", 1)
				Set $Namespace = ProdNS ; Switch back to the original namespace 
				}
				
				//format NHS Number
				set patientID = item.patientID
				If $Length(patientID) = 10 {
    				Set NHSNum = $E(patientID, 1, 3)_" "_$E(patientID, 4, 6)_" "_$E(patientID, 7, 9)_" "_$E(patientID, 10)
    				Write NHSNum
				} Else {
    				Write "Invalid input number"
				}
				//format UBRN
				set UBRN = item.ubrn
				If $Length(UBRN) = 12 {
    				Set formattedUBRN = $E(UBRN, 1, 4)_" "_$E(UBRN, 5, 8)_" "_$E(UBRN, 9, 12)
    				Write formattedUBRN
				} Else {
   					 Write "Invalid input number"
				}
	
	
				set EndUserID = ^LastToken("nhsid_useruid")
	 			
				$$$TRACE("EndUserID "_EndUserID)
				$$$TRACE("patientID: "_NHSNum)
				$$$TRACE("UBRN :"_formattedUBRN)
	
				//print created audit event to audit DB
				Set status = ##class(RFT.ERS.Classes.AuditClass).PerformAction(Username, "ERSResponse", "Description: NHS Number: "_NHSNum_" UBRN: "_formattedUBRN_" EndUserID: "_EndUserID)
				If $$$ISERR(status) {
    			$$$LOGINFO("error updating audit")
				}
				
				if $G(dateDiff)>0
				{
					$$$TRACE("Update to local list required. UBRN: "_ubrn)
					set workList.specialty=item.specialty
					set workList.apptStart=item.apptStart
					set workList.clinicalInfoLastUpdate=item.clinicalInfoLastUpdate
					set workList.priority=item.priority
					set workList.refType=item.refType
					set workList.clinician=item.clinician
					set workList.apptStart=item.apptStart
					set workList.statusFlag=0 //We will poll A005 to grab ref details again
					set workList.UpdatePatientDB=0

					set t=workList.%Save()

					//delete from attachments table as we will redownload
					&sql(DELETE FROM RFT_ERS_Tables.Attachments where ubrn=:ubrn)
				}
				else 
				{
					$$$TRACE("No update required for ubrn: "_ubrn)
				}	
			}
			else 
			{	
				$$$TRACE("Adding new record on local list for: "_ubrn)
				set workList=##class(RFT.ERS.Tables.Worklist).%New()
				set workList.specialty=item.specialty
				set workList.requestContextStatus=item.requestContextStatus
				set workList.clinicalInfoPrinted=item.clinicalInfoPrinted
				set workList.clinicalInfoFirstSubmitted=item.clinicalInfoFirstSubmitted
				set workList.eRefPathwayStart=item.eRefPathwayStart
				set workList.priority=item.priority
				set workList.refType=item.refType
				set workList.clinician=item.clinician
				set workList.apptStart=item.apptStart
				set workList.statusFlag=0 
				set workList.ubrn=item.ubrn
				set workList.patientID=item.patientID
				set workList.UpdatePatientDB=0
				set t=workList.%Save()
			}		


		}
		Set pResponse = ##class(Ens.StringContainer).%New()
		set pResponse.StringValue = "{"_$c(34)_"responseCode"_$c(34)_":200,"_$c(34)_"message"_$c(34)_":"_$c(34)_"OK"_$c(34)_"}"
}
END
	quit t
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="RFT.ERS.Production">
<Super>Ens.Production</Super>
<TimeChanged>66746,37303.0484964</TimeChanged>
<TimeCreated>66746,37303.0484964</TimeCreated>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="RFT.ERS.Production" LogGeneralTraceEvents="false">
  <Description></Description>
  <ActorPoolSize>2</ActorPoolSize>
  <Item Name="Invoke_DocumentDownloader" Category="ERS" ClassName="RFT.ERS.Service.InvokeDocumentDownloader" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="CallInterval">1800</Setting>
  </Item>
  <Item Name="Invoke_RefToDB" Category="ERS" ClassName="RFT.ERS.Service.InvokeRefToDB" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="CallInterval">1800</Setting>
  </Item>
  <Item Name="Sch_InvokeReferralProcessor" Category="ERS" ClassName="RFT.ERS.Service.InvokeReferralProcessor" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="CallInterval">1800</Setting>
  </Item>
  <Item Name="Sch_InvokeWorklistProcessor" Category="ERS" ClassName="RFT.ERS.Service.InvokeWorklistProcessor" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="Port">9985</Setting>
    <Setting Target="Adapter" Name="SSLConfig"></Setting>
    <Setting Target="Host" Name="ArchiveIO">1</Setting>
  </Item>
  <Item Name="ClinicalInformationDownloadProcessor" Category="ERS" ClassName="RFT.ERS.Process.ClinicalInformationProcessor" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="DocumentDownloadProcess" Category="ERS" ClassName="RFT.ERS.Process.DocumentProcessor" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Host" Name="OutputDir">C:\Users\HaitemElAaouani\Documents\eRS\OuPut\raw</Setting>
    <Setting Target="Host" Name="PDFsFolder">C:\Users\HaitemElAaouani\Documents\eRS\OuPut\pdf</Setting>
    <Setting Target="Host" Name="DocumentStorageMode">MOUNTHLY</Setting>
  </Item>
  <Item Name="ReferralProcessor" Category="ERS" ClassName="RFT.ERS.Process.ReferralProcessor" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="ReferralToDB" Category="ERS" ClassName="RFT.ERS.Process.RefToDB" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="WorklistProcessor" Category="ERS" ClassName="RFT.ERS.Process.WorklistProcessor" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="HttpOut_ERS" Category="ERS" ClassName="RFT.ERS.Operation.ERS" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="HTTPServer">https://int.api.service.nhs.uk</Setting>
    <Setting Target="Adapter" Name="SSLConfig">Simple</Setting>
    <Setting Target="Host" Name="FhirServer">https://server.fire.ly/r3</Setting>
    <Setting Target="Host" Name="WorkListSizeLimitKB">10000</Setting>
    <Setting Target="Host" Name="WorkListSizeLimitMB">0.1</Setting>
  </Item>
  <Item Name="ERS_DB_UPDATE" Category="ERS" ClassName="RFT.ERS.Operation.ExecuteQuery" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="DSN">ERS_DATABASE</Setting>
    <Setting Target="Adapter" Name="StayConnected">30</Setting>
    <Setting Target="Adapter" Name="Credentials">ERS</Setting>
  </Item>
  <Item Name="Ens.Alert" Category="" ClassName="EnsLib.EMail.AlertOperation" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
</Production>
]]></Data>
</XData>
</Class>


<Class name="RFT.ERS.Service.InvokeDocumentDownloader">
<Super>Ens.BusinessService</Super>
<TimeChanged>66746,37303.0643983</TimeChanged>
<TimeCreated>66746,37303.0643983</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set t=$$$OK
	
	set url=""
	&SQL(DECLARE DocCursor CURSOR FOR SELECT url into:url FROM RFT_ERS_Tables.Attachments WHERE isDownloaded='0')
	
	&SQL(OPEN DocCursor)
	
	FOR {&SQL(FETCH DocCursor)	
		
		QUIT:SQLCODE
		set req=##class(RFT.ERS.Classes.RequestAttachment).%New()
		set req.url=url
	
		set t=..SendRequestSync("DocumentDownloadProcess",req)
				
	}
	&SQL(CLOSE DocCursor)
	
	
	
		
	quit t
]]></Implementation>
</Method>
</Class>


<Class name="RFT.ERS.Service.InvokeRefToDB">
<Super>Ens.BusinessService</Super>
<TimeChanged>66746,37303.0725104</TimeChanged>
<TimeCreated>66746,37303.0725104</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set t = $$$OK

	// Referral to DB
	set ref="" set attchCount="" set downloadCount=""
	
	&SQL(DECLARE DocCursor CURSOR FOR SELECT RFT_ERS_Tables.Referrals.ubrn,(Select Count(*) from RFT_ERS_Tables.Attachments 
	where RFT_ERS_Tables.Attachments.ubrn = RFT_ERS_Tables.Referrals.ubrn)
	,(Select Count(*) from RFT_ERS_Tables.Attachments where RFT_ERS_Tables.Attachments.ubrn = RFT_ERS_Tables.Referrals.ubrn and RFT_ERS_Tables.Attachments.isDownloaded = 1)
	into:ref,:attchCount,:downloadCount from RFT_ERS_Tables.Referrals
	Where NumDocs = (Select Count(*) from RFT_ERS_Tables.Attachments 
	where RFT_ERS_Tables.Attachments.ubrn = RFT_ERS_Tables.Referrals.ubrn and RFT_ERS_Tables.Attachments.isDownloaded = 1) 
	AND RFT_ERS_Tables.Referrals.statusFlag=0)
	
	&SQL(OPEN DocCursor)
	
	FOR {&SQL(FETCH DocCursor)	
		
		QUIT:SQLCODE
		set req=##class(RFT.ERS.Classes.RefToDB).%New()
		set req.ubrn=ref
		set req.attachmentCount=attchCount
		set req.downloadCount=downloadCount
		set t=..SendRequestSync("ReferralToDB",req)
				
	}
	&SQL(CLOSE DocCursor)

	// Patient to DB
	Try
	{
		Set Qry = "SELECT DISTINCT patientID FROM RFT_ERS_Tables.Worklist WHERE RFT_ERS_Tables.Worklist.UpdatePatientDB = 0"
		Set ToPatientDmg = ##class(%DynamicObject).%New()
		Set ST=##class(%SQL.Statement).%New()

   		set t = ST.%Prepare(Qry)
   		if $$$ISERR(t) {$$$ThrowStatus(t)}

   		set rset = ST.%Execute()
   		if $$$ISERR(t) {$$$ThrowStatus(t)}

   		while rset.%Next()
   		{
   		    set ToPatientDmg.code = rset.%Get("patientID")
				$$$TRACE(ToPatientDmg.code)

   		    set ToPatientDmg.type = "PatientID"
				Set Container = ##class(Ens.StringContainer).%New()
				Set Container.StringValue = ToPatientDmg.%ToJSON()
				set t=..SendRequestSync("ReferralToDB",Container)
   		}
		
	}
	Catch ex {
		Set t=ex.AsStatus()
	}
	
	quit t
]]></Implementation>
</Method>
</Class>


<Class name="RFT.ERS.Service.InvokeReferralProcessor">
<Super>Ens.BusinessService</Super>
<TimeChanged>66746,37303.0689839</TimeChanged>
<TimeCreated>66746,37303.0689839</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set t=$$$OK
	
	//Check if any new referrals in local list 
	
	set ubrn=""
	&SQL(DECLARE DocCursor CURSOR FOR SELECT ubrn into:ubrn FROM RFT_ERS_Tables.Worklist WHERE statusFlag='0')
	
	&SQL(OPEN DocCursor)
	
	FOR {&SQL(FETCH DocCursor)	
		
		QUIT:SQLCODE
		set req=##class(RFT.ERS.Classes.RequestReferralDetails).%New()
		set req.ubrn=ubrn
	
		set t=..SendRequestSync("ReferralProcessor",req)
		set t=..SendRequestSync("ClinicalInformationDownloadProcessor",req)
		
		IF '$$$ISERR(t)
		{
			set workListItem=##class(RFT.ERS.Tables.Worklist).%OpenId(ubrn)
			set workListItem.statusFlag=1
			do workListItem.%Save()

		}	
		
			
				
	}
	&SQL(CLOSE DocCursor)
	
	
	
		
	quit t
]]></Implementation>
</Method>
</Class>


<Class name="RFT.ERS.Service.InvokeWorklistProcessor">
<Super>Ens.BusinessService</Super>
<TimeChanged>66746,37303.117783</TimeChanged>
<TimeCreated>66746,37303.117783</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Parameter ADAPTER = "Ens.InboundAdapter";

]]></Content>
</UDLText>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.HTTP.InboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:%Stream.GlobalCharacter,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Token ingest
	set tsc = $$$OK
	set TokenReceived = 0

    Set AuthJson=pInput.Read(,.tsc)
	set AuthJsonObj = ##class(%DynamicAbstractObject).%FromJSON(AuthJson)
	$$$LOGINFO("AuthJsonObj : "_AuthJsonObj.%Get("auth_token"))
	set ^LastToken("auth_token") = AuthJsonObj.%Get("auth_token")
	set ^LastToken("nhsid_useruid") = AuthJsonObj.%Get("nhsid_useruid")
	set ^LastToken("name") = AuthJsonObj.%Get("name")
	set ^LastToken("token_time") = $zdatetime($horolog,3)
	set TokenReceived = 1

    //make sure Read when OK
	if TokenReceived = 1
	{
		set tsc=..SendRequestSync("WorklistProcessor",TokenReceived)
		// if send with success return {"responseCode":200,"message":"OK"}
		Set pResponse=##class(%GlobalBinaryStream).%New()
		Do pResponse.SetAttribute("Content-Type","application/json")
    	Do pResponse.Write("{"_$c(34)_"responseCode"_$c(34)_":200,"_$c(34)_"message"_$c(34)_":"_$c(34)_"OK"_$c(34)_"}")
	}
	else {If $$$ISERR(tsc) do $System.Status.DisplayError(tsc)}
	
	quit tsc
]]></Implementation>
</Method>
</Class>


<Class name="RFT.ERS.Tables.Attachments">
<Super>%Persistent</Super>
<TimeChanged>66746,37303.1350866</TimeChanged>
<TimeCreated>66746,37303.1350866</TimeCreated>

<Property name="attachmentID">
<Type>%Integer</Type>
</Property>

<Property name="insertedBy">
<Type>%String</Type>
</Property>

<Property name="contentType">
<Type>%String</Type>
</Property>

<Property name="url">
<Type>%String</Type>
</Property>

<Property name="size">
<Type>%String</Type>
</Property>

<Property name="title">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="createdDateTime">
<Type>%String</Type>
</Property>

<Property name="ubrn">
<Type>%String</Type>
</Property>

<Property name="docStatus">
<Type>%String</Type>
</Property>

<Property name="isDownloaded">
<Type>%Integer</Type>
</Property>

<Property name="retryCount">
<Type>%Integer</Type>
</Property>

<Property name="filePath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Index name="Index">
<IdKey>1</IdKey>
<Properties>attachmentID</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^RFT.ERS.Tables.AttachmentsD</DataLocation>
<DefaultData>AttachmentsDefaultData</DefaultData>
<IdLocation>^RFT.ERS.Tables.AttachmentsD</IdLocation>
<IndexLocation>^RFT.ERS.Tables.AttachmentsI</IndexLocation>
<StreamLocation>^RFT.ERS.Tables.AttachmentsS</StreamLocation>
<ExtentSize>1</ExtentSize>
<Data name="AttachmentsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>insertedBy</Value>
</Value>
<Value name="3">
<Value>contentType</Value>
</Value>
<Value name="4">
<Value>url</Value>
</Value>
<Value name="5">
<Value>size</Value>
</Value>
<Value name="6">
<Value>title</Value>
</Value>
<Value name="7">
<Value>createdDateTime</Value>
</Value>
<Value name="8">
<Value>ubrn</Value>
</Value>
<Value name="9">
<Value>docStatus</Value>
</Value>
<Value name="10">
<Value>isDownloaded</Value>
</Value>
<Value name="11">
<Value>retryCount</Value>
</Value>
<Value name="12">
<Value>filePath</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>4</AverageFieldSize>
</Property>
<Property name="attachmentID">
<Selectivity>1</Selectivity>
<AverageFieldSize>4</AverageFieldSize>
</Property>
<Property name="contentType">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="createdDateTime">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>12</AverageFieldSize>
</Property>
<Property name="docStatus">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="filePath">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="insertedBy">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>14</AverageFieldSize>
</Property>
<Property name="isDownloaded">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="retryCount">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="size">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
</Property>
<Property name="title">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>27</AverageFieldSize>
</Property>
<Property name="ubrn">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>14</AverageFieldSize>
</Property>
<Property name="url">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>19</AverageFieldSize>
</Property>
<SQLMap name="Index">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="RFT.ERS.Tables.Referrals">
<Super>%Persistent</Super>
<TimeChanged>66746,37303.1472712</TimeChanged>
<TimeCreated>66746,37303.1472712</TimeCreated>

<Property name="ubrn">
<Type>%String</Type>
</Property>

<Property name="patientID">
<Type>%String</Type>
</Property>

<Property name="apptStart">
<Type>%String</Type>
</Property>

<Property name="apptEnd">
<Type>%String</Type>
</Property>

<Property name="specialty">
<Type>%String</Type>
</Property>

<Property name="status">
<Type>%String</Type>
</Property>

<Property name="intent">
<Type>%String</Type>
</Property>

<Property name="priority">
<Type>%String</Type>
</Property>

<Property name="docStatus">
<Type>%String</Type>
</Property>

<Property name="NumDocs">
<Type>%Integer</Type>
</Property>

<Property name="statusFlag">
<Type>%Boolean</Type>
</Property>

<Index name="ubrnIndex">
<IdKey>1</IdKey>
<Properties>ubrn</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^RFT.ERS.Tables.ReferralsD</DataLocation>
<DefaultData>ReferralsDefaultData</DefaultData>
<IdLocation>^RFT.ERS.Tables.ReferralsD</IdLocation>
<IndexLocation>^RFT.ERS.Tables.ReferralsI</IndexLocation>
<StreamLocation>^RFT.ERS.Tables.ReferralsS</StreamLocation>
<Data name="ReferralsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>patientID</Value>
</Value>
<Value name="3">
<Value>apptStart</Value>
</Value>
<Value name="4">
<Value>apptEnd</Value>
</Value>
<Value name="5">
<Value>specialty</Value>
</Value>
<Value name="6">
<Value>status</Value>
</Value>
<Value name="7">
<Value>intent</Value>
</Value>
<Value name="8">
<Value>priority</Value>
</Value>
<Value name="9">
<Value>docStatus</Value>
</Value>
<Value name="10">
<Value>NumDocs</Value>
</Value>
<Value name="11">
<Value>statusFlag</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="RFT.ERS.Tables.Worklist">
<Super>%Persistent</Super>
<TimeChanged>66746,37303.1408536</TimeChanged>
<TimeCreated>66746,37303.1408536</TimeCreated>

<Property name="ubrn">
<Type>%String</Type>
</Property>

<Property name="specialty">
<Type>%String</Type>
</Property>

<Property name="requestContextStatus">
<Type>%String</Type>
</Property>

<Property name="clinicalInfoPrinted">
<Type>%String</Type>
</Property>

<Property name="clinicalInfoFirstSubmitted">
<Type>%String</Type>
</Property>

<Property name="clinicalInfoLastUpdate">
<Type>%String</Type>
</Property>

<Property name="priority">
<Type>%String</Type>
</Property>

<Property name="patientID">
<Type>%String</Type>
</Property>

<Property name="eRefPathwayStart">
<Type>%String</Type>
</Property>

<Property name="refType">
<Type>%String</Type>
</Property>

<Property name="clinician">
<Type>%String</Type>
</Property>

<Property name="apptStart">
<Type>%String</Type>
</Property>

<Property name="statusFlag">
<Type>%Integer</Type>
</Property>

<Property name="UpdatePatientDB">
<Type>%Integer</Type>
</Property>

<Index name="ubrnIndex">
<IdKey>1</IdKey>
<Properties>ubrn</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^RFT.ERS.Tables.WorklistD</DataLocation>
<DefaultData>WorklistDefaultData</DefaultData>
<IdLocation>^RFT.ERS.Tables.WorklistD</IdLocation>
<IndexLocation>^RFT.ERS.Tables.WorklistI</IndexLocation>
<StreamLocation>^RFT.ERS.Tables.WorklistS</StreamLocation>
<ExtentSize>1</ExtentSize>
<Data name="WorklistDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>specialty</Value>
</Value>
<Value name="3">
<Value>requestContextStatus</Value>
</Value>
<Value name="4">
<Value>clinicalInfoPrinted</Value>
</Value>
<Value name="5">
<Value>clinicalInfoFirstSubmitted</Value>
</Value>
<Value name="6">
<Value>clinicalInfoLastUpdate</Value>
</Value>
<Value name="7">
<Value>priority</Value>
</Value>
<Value name="8">
<Value>patientID</Value>
</Value>
<Value name="9">
<Value>eRefPathwayStart</Value>
</Value>
<Value name="10">
<Value>refType</Value>
</Value>
<Value name="11">
<Value>clinician</Value>
</Value>
<Value name="12">
<Value>apptStart</Value>
</Value>
<Value name="13">
<Value>statusFlag</Value>
</Value>
<Value name="14">
<Value>UpdatePatientDB</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>14</AverageFieldSize>
</Property>
<Property name="UpdatePatientDB">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="apptStart">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="clinicalInfoFirstSubmitted">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="clinicalInfoLastUpdate">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="clinicalInfoPrinted">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="clinician">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="eRefPathwayStart">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="patientID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>12</AverageFieldSize>
</Property>
<Property name="priority">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="refType">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="requestContextStatus">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="specialty">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="statusFlag">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="ubrn">
<Selectivity>1</Selectivity>
<AverageFieldSize>14</AverageFieldSize>
</Property>
<SQLMap name="ubrnIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="RFT.Utility.CodeableConcept">
<Super>%RegisteredObject</Super>
<TimeChanged>66746,37303.1926134</TimeChanged>
<TimeCreated>66746,37303.1926134</TimeCreated>

<Method name="RetriveCode">
<ClassMethod>1</ClassMethod>
<FormalSpec>input:%Library.DynamicObject,*code:%String</FormalSpec>
<Implementation><![CDATA[
 

		set t=$$$OK
		set coding= input.valueCodeableConcept.coding
		set iter=coding.%GetIterator()
		while iter.%GetNext(.key,.value)
		{
				set code=value.code			    	
		}
				    	
		quit code
]]></Implementation>
</Method>
</Class>


<Document name="ERS.ContentTypeToExtension.LUT">
<lookupTable>
<entry table="ERS.ContentTypeToExtension" key="application/msword">doc</entry>
<entry table="ERS.ContentTypeToExtension" key="application/pdf">pdf</entry>
<entry table="ERS.ContentTypeToExtension" key="application/vnd.openxmlformats-officedocument.wordprocessingml.document">docx</entry>
<entry table="ERS.ContentTypeToExtension" key="image/gif">gif</entry>
<entry table="ERS.ContentTypeToExtension" key="image/jpeg">jpeg</entry>
<entry table="ERS.ContentTypeToExtension" key="image/png">png</entry>
<entry table="ERS.ContentTypeToExtension" key="image/tif">tiff</entry>
<entry table="ERS.ContentTypeToExtension" key="image/tiff">tiff</entry>
<entry table="ERS.ContentTypeToExtension" key="text/html">html</entry>
<entry table="ERS.ContentTypeToExtension" key="text/plain">txt</entry>
<entry table="ERS.ContentTypeToExtension" key="text/rtf">rtf</entry>
</lookupTable>
</Document></Export>
